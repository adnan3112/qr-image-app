<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Secure QR Image Viewer</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
      /* Reset & body */
      * { margin: 0; padding: 0; box-sizing: border-box; transition: all 0.3s ease; }
      body {
        font-family: 'Roboto', sans-serif;
        background: linear-gradient(135deg, #e0f7fa, #f3e5f5);
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 20px;
        transition: background 0.5s, color 0.5s;
        color: #222;
        position: relative;
      }

      body.dark {
        background: linear-gradient(135deg, #121212, #1f1f1f);
        color: #eee;
      }

      .container {
        background: #fff;
        max-width: 480px;
        width: 100%;
        border-radius: 18px;
        box-shadow: 0 12px 30px rgba(0,0,0,0.12);
        padding: 40px 35px 50px 35px;
        text-align: center;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
      }
      body.dark .container {
        background: rgba(30,30,30,0.9);
        box-shadow: 0 12px 30px rgba(0,0,0,0.7);
      }

      .container:hover {
        transform: translateY(-6px);
        box-shadow: 0 18px 40px rgba(0,0,0,0.2);
      }

      h2 {
        font-size: 2rem;
        margin-bottom: 25px;
        font-weight: 700;
        letter-spacing: 0.03em;
      }

      input[type='password'] {
        width: 100%;
        padding: 14px 18px;
        border: 2px solid #ccc;
        border-radius: 12px;
        margin-bottom: 20px;
        font-size: 1.1rem;
        outline: none;
        transition: border-color 0.3s, background-color 0.3s, color 0.3s;
        box-shadow: inset 0 2px 5px rgba(0,0,0,0.07);
      }
      body.dark input[type='password'] {
        background: #2c2c2c;
        color: #eee;
        border: 2px solid #555;
        box-shadow: inset 0 2px 5px rgba(0,0,0,0.3);
      }
      input[type='password']:focus {
        border-color: #7b4dff;
        box-shadow: 0 0 8px rgba(123, 77, 255, 0.6);
        background-color: #fff;
        color: #222;
      }
      body.dark input[type='password']:focus {
        background-color: #3a3a3a;
        color: #eee;
      }

      button {
        background: linear-gradient(135deg, #7b4dff, #5a2ddb);
        color: #fff;
        border: none;
        padding: 14px 32px;
        font-size: 1.1rem;
        font-weight: 600;
        border-radius: 12px;
        cursor: pointer;
        box-shadow: 0 6px 15px rgba(123, 77, 255, 0.4);
        transition: background 0.35s ease, transform 0.2s ease;
      }
      button:hover, button:focus {
        background: linear-gradient(135deg, #5a2ddb, #7b4dff);
        transform: scale(1.08);
        box-shadow: 0 8px 20px rgba(123, 77, 255, 0.6);
        outline: none;
      }
      button:active {
        transform: scale(0.98);
      }

      #error {
        color: #e53935;
        margin-top: 18px;
        font-weight: 600;
        font-size: 1rem;
        min-height: 1.2em;
        user-select: none;
      }

      #img {
        max-width: 100%;
        margin-top: 30px;
        border-radius: 16px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.12);
        opacity: 0;
        transform: scale(0.95);
        transition: opacity 0.6s ease, transform 0.6s ease;
        border: 3px solid transparent;
      }

      #img.show {
        opacity: 1;
        transform: scale(1);
        border-color: #7b4dff;
      }

      .theme-toggle {
        position: fixed;
        top: 20px;
        right: 20px;
        cursor: pointer;
        background: none;
        border: 2.5px solid #7b4dff;
        border-radius: 50%;
        padding: 10px 14px;
        font-weight: 700;
        font-size: 1.3rem;
        color: #7b4dff;
        user-select: none;
        transition: all 0.3s ease;
        z-index: 1000;
        box-shadow: 0 4px 12px rgba(123,77,255,0.4);
      }
      .theme-toggle:hover, .theme-toggle:focus {
        background-color: #7b4dff;
        color: #fff;
        outline: none;
        box-shadow: 0 6px 18px rgba(123,77,255,0.7);
      }

      @media (max-width: 600px) {
        .container {
          padding: 30px 25px 40px 25px;
          margin: 0 10px;
        }
        h2 {
          font-size: 1.6rem;
        }
        input[type='password'] {
          font-size: 1rem;
          padding: 12px 15px;
        }
        button {
          font-size: 1rem;
          padding: 12px 25px;
        }
        #img {
          margin-top: 25px;
          border-radius: 12px;
        }
        .theme-toggle {
          top: 15px;
          right: 15px;
          padding: 8px 12px;
          font-size: 1.1rem;
          border-width: 2px;
        }
      }
    </style>
  </head>
  <body>
    <button class="theme-toggle" aria-label="Toggle dark/light mode" onclick="toggleTheme()" title="Toggle dark/light mode">🌙</button>
    <div class="container" role="main" aria-labelledby="heading">
      <h2 id="heading">Enter Password to Unlock Image</h2>
      <input type="password" id="pwd" placeholder="Password" aria-describedby="error" aria-required="true" autocomplete="current-password" />
      <br />
      <button onclick="unlockImage()" aria-label="Unlock image with password">Unlock</button>
      <p id="error" role="alert" aria-live="assertive"></p>
      <img id="img" alt="Unlocked secure QR image" style="display:none;" />
    </div>

    <script>
      // Initialize theme based on user preference or default to light
      (function initTheme() {
        const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
        if(localStorage.getItem('theme') === 'dark' || (!localStorage.getItem('theme') && prefersDark)) {
          document.body.classList.add('dark');
          document.querySelector('.theme-toggle').textContent = '☀️';
        }
      })();

      function toggleTheme() {
        const btn = document.querySelector('.theme-toggle');
        document.body.classList.toggle('dark');
        if(document.body.classList.contains('dark')) {
          btn.textContent = '☀️';
          localStorage.setItem('theme', 'dark');
        } else {
          btn.textContent = '🌙';
          localStorage.setItem('theme', 'light');
        }
      }

      async function unlockImage() {
        const pwdInput = document.getElementById('pwd').value.trim();
        const params = new URLSearchParams(window.location.hash.slice(1));
        const fileName = params.get('file');
        const passwordFromUrl = params.get('password');

        const errorElem = document.getElementById('error');
        const imgElem = document.getElementById('img');
        imgElem.style.display = 'none';
        imgElem.classList.remove('show');
        errorElem.textContent = '';

        if (!fileName || !pwdInput) {
          errorElem.textContent = 'Missing file or password!';
          return;
        }

        if (pwdInput !== passwordFromUrl) {
          errorElem.textContent = 'Incorrect password!';
          return;
        }

        try {
          const backendUrl = 'http://localhost:3000'; // update for deployment later
          const resp = await fetch(`${backendUrl}/download?fileName=${encodeURIComponent(fileName)}`);
          if (!resp.ok) throw new Error('Failed to fetch image info');

          const data = await resp.json();
          if (!data.downloadUrl) throw new Error('No downloadUrl in response');

          imgElem.src = data.downloadUrl;
          imgElem.style.display = 'block';
          setTimeout(() => imgElem.classList.add('show'), 50);
          errorElem.textContent = '';
        } catch (e) {
          console.error(e);
          errorElem.textContent = 'Failed to load image!';
        }
      }
    </script>
  </body>
</html>